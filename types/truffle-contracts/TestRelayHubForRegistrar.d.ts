/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface TestRelayHubForRegistrarContract
  extends Truffle.Contract<TestRelayHubForRegistrarInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<TestRelayHubForRegistrarInstance>;
}

type AllEvents = never;

export interface TestRelayHubForRegistrarInstance
  extends Truffle.ContractInstance {
  isStaked(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  setRelayManagerStaked: {
    (
      relayManager: string,
      _isStaked: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      relayManager: string,
      _isStaked: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      relayManager: string,
      _isStaked: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      relayManager: string,
      _isStaked: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  verifyCanRegister(
    relayManager: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<void>;

  verifyRelayManagerStaked(
    relayManager: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<void>;

  onRelayServerRegistered(
    relayManager: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<void>;

  methods: {
    isStaked(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    setRelayManagerStaked: {
      (
        relayManager: string,
        _isStaked: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        relayManager: string,
        _isStaked: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        relayManager: string,
        _isStaked: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        relayManager: string,
        _isStaked: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    verifyCanRegister(
      relayManager: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;

    verifyRelayManagerStaked(
      relayManager: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;

    onRelayServerRegistered(
      relayManager: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
